# Generated by Qodo Gen
from func import is_negative_and_positive, min_and_max
import unittest


class TestMain(unittest.TestCase):

    # Correctly calculates addition, subtraction, multiplication, and division
    def test_correct_calculations(self):
        numbers = [1, 2, 3, 4, 5]
        expected_min_max = (1, 5)
        expected_neg_pos_zero = (0, [], 5, [1, 2, 3, 4, 5], 0)

        self.assertEqual(min_and_max(numbers), expected_min_max)
        self.assertEqual(is_negative_and_positive(numbers), expected_neg_pos_zero)

    # Handles division by zero gracefully
    def test_division_by_zero_handling(self):
        numbers = [0, 0, 0, 0, 0]
        expected_min_max = (0, 0)
        expected_neg_pos_zero = (0, [], 0, [], 5)

        self.assertEqual(min_and_max(numbers), expected_min_max)
        self.assertEqual(is_negative_and_positive(numbers), expected_neg_pos_zero)

    # Handles valid input expressions and returns correct results
    def test_handles_valid_input(self):
        # Arrange
        numbers = [10, -20, 30, 0, -40, 50, 60, -70, 80, 90, -100, 0, 0, 0, 0]

        # Act
        a, b, c, d, e = is_negative_and_positive(numbers)

        # Assert
        self.assertEqual(min_and_max(numbers), (-100, 90))
        self.assertEqual((a, b), (4, [-20, -40, -70, -100]))
        self.assertEqual((c, d), (6, [10, 30, 50, 60, 80, 90]))
        self.assertEqual(e, 5)