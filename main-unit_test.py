# Generated by Qodo Gen
from func import main, replacer
import unittest

class TestMain(unittest.TestCase):

    # Replacing a word in a sentence with another word
    def test_replace_word_in_sentence(self):
        text = "Hello world"
        to_replace = "world"
        how_to_replace = "universe"
        expected_output = "Hello universe"
        self.assertEqual(replacer(text, to_replace, how_to_replace), expected_output)

    # Input text contains no words to replace
    def test_no_words_to_replace(self):
        text = "Hello world"
        to_replace = "planet"
        how_to_replace = "universe"
        expected_output = "Hello world"
        self.assertEqual(replacer(text, to_replace, how_to_replace), expected_output)

    # Replacement word is the same as the word to replace
    def test_replacement_word_same_as_to_replace(self):
        text = "Hello world"
        to_replace = "world"
        how_to_replace = "world"
        expected_output = "Hello world"
        self.assertEqual(replacer(text, to_replace, how_to_replace), expected_output)

    # Successfully returning the modified text after replacement
    def test_returning_modified_text(self):
        # Importing necessary function from internal organization module
        from func import replacer

        # Test replacing a word in the text
        original_text = "This is a sample sentence"
        to_replace = "sample"
        replacement = "test"
        expected_result = "This is a test sentence"
    
        # Call the function and check if the result is as expected
        result = replacer(original_text, to_replace, replacement)
        self.assertEqual(result, expected_result)